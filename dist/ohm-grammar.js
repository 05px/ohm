var ohm = require('..');
module.exports = ohm.makeRecipe(function() {
  var decl = this.newGrammar("Ohm")
    .withSource("Ohm {\n\n  Grammars\n    = Grammar*\n\n  Grammar\n    = ident SuperGrammar? \"{\" Rule* \"}\"\n\n  SuperGrammar\n    = \"<:\" ident\n\n  Rule\n    = ident Formals? ruleDescr? \"=\"  RuleBody  -- define\n    | ident Formals?            \":=\" RuleBody  -- override\n    | ident Formals?            \"+=\" RuleBody  -- extend\n\n  RuleBody\n    = \"|\"? NonemptyListOf<TopLevelTerm, \"|\">\n\n  TopLevelTerm\n    = Seq caseName  -- inline\n    | Seq\n\n  Formals\n    = \"<\" ListOf<ident, \",\"> \">\"\n\n  Params\n    = \"<\" ListOf<Seq, \",\"> \">\"\n\n  Alt\n    = NonemptyListOf<Seq, \"|\">\n\n  Seq\n    = Iter*\n\n  Iter\n    = Pred \"*\"  -- star\n    | Pred \"+\"  -- plus\n    | Pred \"?\"  -- opt\n    | Pred\n\n  Pred\n    = \"~\" Lex  -- not\n    | \"&\" Lex  -- lookahead\n    | Lex\n\n  Lex\n    = \"#\" Base  -- lex\n    | Base\n\n  Base\n    = ident Params? ~(ruleDescr? \"=\" | \":=\" | \"+=\")  -- application\n    | terminal \"..\" terminal                         -- range\n    | terminal                                       -- terminal\n    | \"(\" Alt \")\"                                    -- paren\n\n  ruleDescr  (a rule description)\n    = \"(\" ruleDescrText \")\"\n\n  ruleDescrText\n    = (~\")\" any)*\n\n  caseName\n    = \"--\" (~\"\\n\" space)* name (~\"\\n\" space)* (\"\\n\" | &\"}\")\n\n  name  (a name)\n    = nameFirst nameRest*\n\n  nameFirst\n    = \"_\"\n    | letter\n\n  nameRest\n    = \"_\"\n    | alnum\n\n  ident  (an identifier)\n    = name\n\n  terminal\n    = \"\\\"\" terminalChar* \"\\\"\"\n\n  terminalChar\n    = escapeChar\n    | ~\"\\\\\" ~\"\\\"\" ~\"\\n\" any\n\n  escapeChar  (an escape sequence)\n    = \"\\\\\\\\\"                                     -- backslash\n    | \"\\\\\\\"\"                                     -- doubleQuote\n    | \"\\\\\\'\"                                     -- singleQuote\n    | \"\\\\b\"                                      -- backspace\n    | \"\\\\n\"                                      -- lineFeed\n    | \"\\\\r\"                                      -- carriageReturn\n    | \"\\\\t\"                                      -- tab\n    | \"\\\\u\" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape\n    | \"\\\\x\" hexDigit hexDigit                    -- hexEscape\n\n  space\n   += comment\n\n  comment\n    = \"//\" (~\"\\n\" any)* \"\\n\"  -- singleLine\n    | \"/*\" (~\"*/\" any)* \"*/\"  -- multiLine\n\n  tokens = token*\n\n  token = caseName | comment | ident | operator | punctuation | terminal | any\n\n  operator = \"<:\" | \"=\" | \":=\" | \"+=\" | \"*\" | \"+\" | \"?\" | \"~\" | \"&\"\n\n  punctuation = \"<\" | \">\" | \",\" | \"--\"\n}")
    .withDefaultStartRule("Grammars")
  return decl
    .define("Grammars", [], this.star(this.app("Grammar").withInterval(decl.sourceInterval(24, 31))).withInterval(decl.sourceInterval(24, 32)))
    .define("Grammar", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(50, 55)), this.opt(this.app("SuperGrammar").withInterval(decl.sourceInterval(56, 68))).withInterval(decl.sourceInterval(56, 69)), this.terminal("{").withInterval(decl.sourceInterval(70, 73)), this.star(this.app("Rule").withInterval(decl.sourceInterval(74, 78))).withInterval(decl.sourceInterval(74, 79)), this.terminal("}").withInterval(decl.sourceInterval(80, 83))).withInterval(decl.sourceInterval(50, 83)))
    .define("SuperGrammar", [], this.seq(this.terminal("<:").withInterval(decl.sourceInterval(106, 110)), this.app("ident").withInterval(decl.sourceInterval(111, 116))).withInterval(decl.sourceInterval(106, 116)))
    .define("Rule_define", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(131, 136)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(137, 144))).withInterval(decl.sourceInterval(137, 145)), this.opt(this.app("ruleDescr").withInterval(decl.sourceInterval(146, 155))).withInterval(decl.sourceInterval(146, 156)), this.terminal("=").withInterval(decl.sourceInterval(157, 160)), this.app("RuleBody").withInterval(decl.sourceInterval(162, 170))).withInterval(decl.sourceInterval(131, 170)))
    .define("Rule_override", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(188, 193)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(194, 201))).withInterval(decl.sourceInterval(194, 202)), this.terminal(":=").withInterval(decl.sourceInterval(214, 218)), this.app("RuleBody").withInterval(decl.sourceInterval(219, 227))).withInterval(decl.sourceInterval(188, 227)))
    .define("Rule_extend", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(247, 252)), this.opt(this.app("Formals").withInterval(decl.sourceInterval(253, 260))).withInterval(decl.sourceInterval(253, 261)), this.terminal("+=").withInterval(decl.sourceInterval(273, 277)), this.app("RuleBody").withInterval(decl.sourceInterval(278, 286))).withInterval(decl.sourceInterval(247, 286)))
    .define("Rule", [], this.alt(this.app("Rule_define").withInterval(decl.sourceInterval(131, 170)), this.app("Rule_override").withInterval(decl.sourceInterval(188, 227)), this.app("Rule_extend").withInterval(decl.sourceInterval(247, 286))).withInterval(decl.sourceInterval(131, 297)))
    .define("RuleBody", [], this.seq(this.opt(this.terminal("|").withInterval(decl.sourceInterval(316, 319))).withInterval(decl.sourceInterval(316, 320)), this.app("NonemptyListOf", [this.app("TopLevelTerm").withInterval(decl.sourceInterval(336, 348)), this.terminal("|").withInterval(decl.sourceInterval(350, 353))]).withInterval(decl.sourceInterval(321, 354))).withInterval(decl.sourceInterval(316, 354)))
    .define("TopLevelTerm_inline", [], this.seq(this.app("Seq").withInterval(decl.sourceInterval(377, 380)), this.app("caseName").withInterval(decl.sourceInterval(381, 389))).withInterval(decl.sourceInterval(377, 389)))
    .define("TopLevelTerm", [], this.alt(this.app("TopLevelTerm_inline").withInterval(decl.sourceInterval(377, 389)), this.app("Seq").withInterval(decl.sourceInterval(407, 410))).withInterval(decl.sourceInterval(377, 410)))
    .define("Formals", [], this.seq(this.terminal("<").withInterval(decl.sourceInterval(428, 431)), this.app("ListOf", [this.app("ident").withInterval(decl.sourceInterval(439, 444)), this.terminal(",").withInterval(decl.sourceInterval(446, 449))]).withInterval(decl.sourceInterval(432, 450)), this.terminal(">").withInterval(decl.sourceInterval(451, 454))).withInterval(decl.sourceInterval(428, 454)))
    .define("Params", [], this.seq(this.terminal("<").withInterval(decl.sourceInterval(471, 474)), this.app("ListOf", [this.app("Seq").withInterval(decl.sourceInterval(482, 485)), this.terminal(",").withInterval(decl.sourceInterval(487, 490))]).withInterval(decl.sourceInterval(475, 491)), this.terminal(">").withInterval(decl.sourceInterval(492, 495))).withInterval(decl.sourceInterval(471, 495)))
    .define("Alt", [], this.app("NonemptyListOf", [this.app("Seq").withInterval(decl.sourceInterval(524, 527)), this.terminal("|").withInterval(decl.sourceInterval(529, 532))]).withInterval(decl.sourceInterval(509, 533)))
    .define("Seq", [], this.star(this.app("Iter").withInterval(decl.sourceInterval(547, 551))).withInterval(decl.sourceInterval(547, 552)))
    .define("Iter_star", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(567, 571)), this.terminal("*").withInterval(decl.sourceInterval(572, 575))).withInterval(decl.sourceInterval(567, 575)))
    .define("Iter_plus", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(591, 595)), this.terminal("+").withInterval(decl.sourceInterval(596, 599))).withInterval(decl.sourceInterval(591, 599)))
    .define("Iter_opt", [], this.seq(this.app("Pred").withInterval(decl.sourceInterval(615, 619)), this.terminal("?").withInterval(decl.sourceInterval(620, 623))).withInterval(decl.sourceInterval(615, 623)))
    .define("Iter", [], this.alt(this.app("Iter_star").withInterval(decl.sourceInterval(567, 575)), this.app("Iter_plus").withInterval(decl.sourceInterval(591, 599)), this.app("Iter_opt").withInterval(decl.sourceInterval(615, 623)), this.app("Pred").withInterval(decl.sourceInterval(638, 642))).withInterval(decl.sourceInterval(567, 642)))
    .define("Pred_not", [], this.seq(this.terminal("~").withInterval(decl.sourceInterval(657, 660)), this.app("Lex").withInterval(decl.sourceInterval(661, 664))).withInterval(decl.sourceInterval(657, 664)))
    .define("Pred_lookahead", [], this.seq(this.terminal("&").withInterval(decl.sourceInterval(679, 682)), this.app("Lex").withInterval(decl.sourceInterval(683, 686))).withInterval(decl.sourceInterval(679, 686)))
    .define("Pred", [], this.alt(this.app("Pred_not").withInterval(decl.sourceInterval(657, 664)), this.app("Pred_lookahead").withInterval(decl.sourceInterval(679, 686)), this.app("Lex").withInterval(decl.sourceInterval(707, 710))).withInterval(decl.sourceInterval(657, 710)))
    .define("Lex_lex", [], this.seq(this.terminal("#").withInterval(decl.sourceInterval(724, 727)), this.app("Base").withInterval(decl.sourceInterval(728, 732))).withInterval(decl.sourceInterval(724, 732)))
    .define("Lex", [], this.alt(this.app("Lex_lex").withInterval(decl.sourceInterval(724, 732)), this.app("Base").withInterval(decl.sourceInterval(747, 751))).withInterval(decl.sourceInterval(724, 751)))
    .define("Base_application", [], this.seq(this.app("ident").withInterval(decl.sourceInterval(766, 771)), this.opt(this.app("Params").withInterval(decl.sourceInterval(772, 778))).withInterval(decl.sourceInterval(772, 779)), this.not(this.alt(this.seq(this.opt(this.app("ruleDescr").withInterval(decl.sourceInterval(782, 791))).withInterval(decl.sourceInterval(782, 792)), this.terminal("=").withInterval(decl.sourceInterval(793, 796))).withInterval(decl.sourceInterval(782, 796)), this.terminal(":=").withInterval(decl.sourceInterval(799, 803)), this.terminal("+=").withInterval(decl.sourceInterval(806, 810))).withInterval(decl.sourceInterval(782, 810))).withInterval(decl.sourceInterval(780, 811))).withInterval(decl.sourceInterval(766, 811)))
    .define("Base_range", [], this.seq(this.app("terminal").withInterval(decl.sourceInterval(834, 842)), this.terminal("..").withInterval(decl.sourceInterval(843, 847)), this.app("terminal").withInterval(decl.sourceInterval(848, 856))).withInterval(decl.sourceInterval(834, 856)))
    .define("Base_terminal", [], this.app("terminal").withInterval(decl.sourceInterval(896, 904)))
    .define("Base_paren", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(961, 964)), this.app("Alt").withInterval(decl.sourceInterval(965, 968)), this.terminal(")").withInterval(decl.sourceInterval(969, 972))).withInterval(decl.sourceInterval(961, 972)))
    .define("Base", [], this.alt(this.app("Base_application").withInterval(decl.sourceInterval(766, 811)), this.app("Base_range").withInterval(decl.sourceInterval(834, 856)), this.app("Base_terminal").withInterval(decl.sourceInterval(896, 904)), this.app("Base_paren").withInterval(decl.sourceInterval(961, 972))).withInterval(decl.sourceInterval(766, 1016)))
    .define("ruleDescr", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(1058, 1061)), this.app("ruleDescrText").withInterval(decl.sourceInterval(1062, 1075)), this.terminal(")").withInterval(decl.sourceInterval(1076, 1079))).withInterval(decl.sourceInterval(1058, 1079)), "a rule description")
    .define("ruleDescrText", [], this.star(this.seq(this.not(this.terminal(")").withInterval(decl.sourceInterval(1105, 1108))).withInterval(decl.sourceInterval(1104, 1108)), this.app("any").withInterval(decl.sourceInterval(1109, 1112))).withInterval(decl.sourceInterval(1104, 1112))).withInterval(decl.sourceInterval(1103, 1114)))
    .define("caseName", [], this.seq(this.terminal("--").withInterval(decl.sourceInterval(1133, 1137)), this.star(this.seq(this.not(this.terminal("\n").withInterval(decl.sourceInterval(1140, 1144))).withInterval(decl.sourceInterval(1139, 1144)), this.app("space").withInterval(decl.sourceInterval(1145, 1150))).withInterval(decl.sourceInterval(1139, 1150))).withInterval(decl.sourceInterval(1138, 1152)), this.app("name").withInterval(decl.sourceInterval(1153, 1157)), this.star(this.seq(this.not(this.terminal("\n").withInterval(decl.sourceInterval(1160, 1164))).withInterval(decl.sourceInterval(1159, 1164)), this.app("space").withInterval(decl.sourceInterval(1165, 1170))).withInterval(decl.sourceInterval(1159, 1170))).withInterval(decl.sourceInterval(1158, 1172)), this.alt(this.terminal("\n").withInterval(decl.sourceInterval(1174, 1178)), this.la(this.terminal("}").withInterval(decl.sourceInterval(1182, 1185))).withInterval(decl.sourceInterval(1181, 1185))).withInterval(decl.sourceInterval(1174, 1185))).withInterval(decl.sourceInterval(1133, 1186)))
    .define("name", [], this.seq(this.app("nameFirst").withInterval(decl.sourceInterval(1211, 1220)), this.star(this.app("nameRest").withInterval(decl.sourceInterval(1221, 1229))).withInterval(decl.sourceInterval(1221, 1230))).withInterval(decl.sourceInterval(1211, 1230)), "a name")
    .define("nameFirst", [], this.alt(this.terminal("_").withInterval(decl.sourceInterval(1250, 1253)), this.app("letter").withInterval(decl.sourceInterval(1260, 1266))).withInterval(decl.sourceInterval(1250, 1266)))
    .define("nameRest", [], this.alt(this.terminal("_").withInterval(decl.sourceInterval(1285, 1288)), this.app("alnum").withInterval(decl.sourceInterval(1295, 1300))).withInterval(decl.sourceInterval(1285, 1300)))
    .define("ident", [], this.app("name").withInterval(decl.sourceInterval(1333, 1337)), "an identifier")
    .define("terminal", [], this.seq(this.terminal("\"").withInterval(decl.sourceInterval(1356, 1360)), this.star(this.app("terminalChar").withInterval(decl.sourceInterval(1361, 1373))).withInterval(decl.sourceInterval(1361, 1374)), this.terminal("\"").withInterval(decl.sourceInterval(1375, 1379))).withInterval(decl.sourceInterval(1356, 1379)))
    .define("terminalChar", [], this.alt(this.app("escapeChar").withInterval(decl.sourceInterval(1402, 1412)), this.seq(this.not(this.terminal("\\").withInterval(decl.sourceInterval(1420, 1424))).withInterval(decl.sourceInterval(1419, 1424)), this.not(this.terminal("\"").withInterval(decl.sourceInterval(1426, 1430))).withInterval(decl.sourceInterval(1425, 1430)), this.not(this.terminal("\n").withInterval(decl.sourceInterval(1432, 1436))).withInterval(decl.sourceInterval(1431, 1436)), this.app("any").withInterval(decl.sourceInterval(1437, 1440))).withInterval(decl.sourceInterval(1419, 1440))).withInterval(decl.sourceInterval(1402, 1440)))
    .define("escapeChar_backslash", [], this.terminal("\\\\").withInterval(decl.sourceInterval(1483, 1489)))
    .define("escapeChar_doubleQuote", [], this.terminal("\\\"").withInterval(decl.sourceInterval(1545, 1551)))
    .define("escapeChar_singleQuote", [], this.terminal("\\'").withInterval(decl.sourceInterval(1609, 1615)))
    .define("escapeChar_backspace", [], this.terminal("\\b").withInterval(decl.sourceInterval(1673, 1678)))
    .define("escapeChar_lineFeed", [], this.terminal("\\n").withInterval(decl.sourceInterval(1735, 1740)))
    .define("escapeChar_carriageReturn", [], this.terminal("\\r").withInterval(decl.sourceInterval(1796, 1801)))
    .define("escapeChar_tab", [], this.terminal("\\t").withInterval(decl.sourceInterval(1863, 1868)))
    .define("escapeChar_unicodeEscape", [], this.seq(this.terminal("\\u").withInterval(decl.sourceInterval(1919, 1924)), this.app("hexDigit").withInterval(decl.sourceInterval(1925, 1933)), this.app("hexDigit").withInterval(decl.sourceInterval(1934, 1942)), this.app("hexDigit").withInterval(decl.sourceInterval(1943, 1951)), this.app("hexDigit").withInterval(decl.sourceInterval(1952, 1960))).withInterval(decl.sourceInterval(1919, 1960)))
    .define("escapeChar_hexEscape", [], this.seq(this.terminal("\\x").withInterval(decl.sourceInterval(1985, 1990)), this.app("hexDigit").withInterval(decl.sourceInterval(1991, 1999)), this.app("hexDigit").withInterval(decl.sourceInterval(2000, 2008))).withInterval(decl.sourceInterval(1985, 2008)))
    .define("escapeChar", [], this.alt(this.app("escapeChar_backslash").withInterval(decl.sourceInterval(1483, 1489)), this.app("escapeChar_doubleQuote").withInterval(decl.sourceInterval(1545, 1551)), this.app("escapeChar_singleQuote").withInterval(decl.sourceInterval(1609, 1615)), this.app("escapeChar_backspace").withInterval(decl.sourceInterval(1673, 1678)), this.app("escapeChar_lineFeed").withInterval(decl.sourceInterval(1735, 1740)), this.app("escapeChar_carriageReturn").withInterval(decl.sourceInterval(1796, 1801)), this.app("escapeChar_tab").withInterval(decl.sourceInterval(1863, 1868)), this.app("escapeChar_unicodeEscape").withInterval(decl.sourceInterval(1919, 1960)), this.app("escapeChar_hexEscape").withInterval(decl.sourceInterval(1985, 2008))).withInterval(decl.sourceInterval(1483, 2040)), "an escape sequence")
    .extend("space", [], this.app("comment").withInterval(decl.sourceInterval(2056, 2063)))
    .define("comment_singleLine", [], this.seq(this.terminal("//").withInterval(decl.sourceInterval(2081, 2085)), this.star(this.seq(this.not(this.terminal("\n").withInterval(decl.sourceInterval(2088, 2092))).withInterval(decl.sourceInterval(2087, 2092)), this.app("any").withInterval(decl.sourceInterval(2093, 2096))).withInterval(decl.sourceInterval(2087, 2096))).withInterval(decl.sourceInterval(2086, 2098)), this.terminal("\n").withInterval(decl.sourceInterval(2099, 2103))).withInterval(decl.sourceInterval(2081, 2103)))
    .define("comment_multiLine", [], this.seq(this.terminal("/*").withInterval(decl.sourceInterval(2125, 2129)), this.star(this.seq(this.not(this.terminal("*/").withInterval(decl.sourceInterval(2132, 2136))).withInterval(decl.sourceInterval(2131, 2136)), this.app("any").withInterval(decl.sourceInterval(2137, 2140))).withInterval(decl.sourceInterval(2131, 2140))).withInterval(decl.sourceInterval(2130, 2142)), this.terminal("*/").withInterval(decl.sourceInterval(2143, 2147))).withInterval(decl.sourceInterval(2125, 2147)))
    .define("comment", [], this.alt(this.app("comment_singleLine").withInterval(decl.sourceInterval(2081, 2103)), this.app("comment_multiLine").withInterval(decl.sourceInterval(2125, 2147))).withInterval(decl.sourceInterval(2081, 2161)))
    .define("tokens", [], this.star(this.app("token").withInterval(decl.sourceInterval(2174, 2179))).withInterval(decl.sourceInterval(2174, 2180)))
    .define("token", [], this.alt(this.app("caseName").withInterval(decl.sourceInterval(2192, 2200)), this.app("comment").withInterval(decl.sourceInterval(2203, 2210)), this.app("ident").withInterval(decl.sourceInterval(2213, 2218)), this.app("operator").withInterval(decl.sourceInterval(2221, 2229)), this.app("punctuation").withInterval(decl.sourceInterval(2232, 2243)), this.app("terminal").withInterval(decl.sourceInterval(2246, 2254)), this.app("any").withInterval(decl.sourceInterval(2257, 2260))).withInterval(decl.sourceInterval(2192, 2260)))
    .define("operator", [], this.alt(this.terminal("<:").withInterval(decl.sourceInterval(2275, 2279)), this.terminal("=").withInterval(decl.sourceInterval(2282, 2285)), this.terminal(":=").withInterval(decl.sourceInterval(2288, 2292)), this.terminal("+=").withInterval(decl.sourceInterval(2295, 2299)), this.terminal("*").withInterval(decl.sourceInterval(2302, 2305)), this.terminal("+").withInterval(decl.sourceInterval(2308, 2311)), this.terminal("?").withInterval(decl.sourceInterval(2314, 2317)), this.terminal("~").withInterval(decl.sourceInterval(2320, 2323)), this.terminal("&").withInterval(decl.sourceInterval(2326, 2329))).withInterval(decl.sourceInterval(2275, 2329)))
    .define("punctuation", [], this.alt(this.terminal("<").withInterval(decl.sourceInterval(2347, 2350)), this.terminal(">").withInterval(decl.sourceInterval(2353, 2356)), this.terminal(",").withInterval(decl.sourceInterval(2359, 2362)), this.terminal("--").withInterval(decl.sourceInterval(2365, 2369))).withInterval(decl.sourceInterval(2347, 2369)))
    .build();
});

