Ohm {

  Grammars
    = Grammar*

  Grammar
    = ident:n SuperGrammar?:s '{' Rule*:rs '}'

  SuperGrammar
    = '<:' ident:ns '.' ident:n  -- qualified
    | '<:' ident:n               -- unqualified

  Rule
    = ident:n ruleDescr?:d '='  Alt:b  -- define
    | ident:n              ':=' Alt:b  -- override
    | ident:n              '+=' Alt:b  -- extend

  Alt
    = Term:x '|' Alt:y  -- rec
    | Term

  Term
    = Seq:x caseName:n -- inline
    | Seq

  Seq
    = Factor*

  Factor
    = Iter:x ':' ident:n  -- bind
    | Iter

  Iter
    = Pred:x '*'  -- star
    | Pred:x '+'  -- plus
    | Pred:x '?'  -- opt
    | Pred

  Pred
    = '~' Base:x  -- not
    | '&' Base:x  -- lookahead
    | Base

  Base
    = ident:ruleName ~(ruleDescr? '=' | ':=' | '+=')  -- application
    | (keyword | string | regExp | number)            -- prim
    | '(' Alt:x ')'                                   -- paren
    | '[' Alt:x ']'                                   -- listy
    | '{' '...'?:lenient '}'                          -- obj
    | '{' Props:ps (',' '...')?:lenient '}'           -- objWithProps

  Props
    = Prop:p ',' Props:ps  -- rec
    | Prop:p               -- base

  Prop
    = (name | string):n ':' Base:p

  ruleDescr  -- rule description for use in error messages
    = '--' ruleDescrText:t '\n'

  ruleDescrText
    = (~'\n' _)*

  caseName
    = '--' (~'\n' space)* name:n (~'\n' space)* ('\n' | &'}')

  name  -- name
    = nameFirst nameRest*

  nameFirst
    = '_'
    | letter

  nameRest
    = '_'
    | alnum

  ident  -- identifier
    = ~keyword name:n

  keyword
    = 'undefined' ~nameRest  -- undefined
    | 'null' ~nameRest       -- null
    | 'true' ~nameRest       -- true
    | 'false' ~nameRest      -- false

  string  -- string literal
    = '\'' sChar*:cs '\''

  sChar
    = '\\x' hexDigit hexDigit
    | '\\u' hexDigit hexDigit hexDigit hexDigit
    | '\\' _
    | ~'\'' ~'\n' _

  regExp  -- regular expression
    = '/' reCharClass:e '/'

  reCharClass
    = '[' ('\\]' | ~']' _)* ']'

  number  -- number
    = '-'? digit+

  space
   += '//' (~'\n' _)* '\n'  -- singleLine
    | '/*' (~'*/' _)* '*/'  -- multiLine

}

